// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'activity_name_model.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

ActivityDropdown _$ActivityDropdownFromJson(Map<String, dynamic> json) =>
    ActivityDropdown(
      id: json['id'] as String?,
      countryCode: json['countryCode'] as String?,
      countryName: json['countryName'] as String?,
      outputProgress: (json['outputProgress'] as num?)?.toDouble(),
      agencyId: json['agencyId'] as String?,
      agencyCode: json['agencyCode'] as String?,
      outputTarget: (json['outputTarget'] as num?)?.toDouble(),
      outputDescr: json['outputDescr'] as String?,
      agencyName: json['agencyName'] as String?,
      projectId: json['projectId'] as String?,
      projectCode: json['projectCode'] as String?,
      projectName: json['projectName'] as String?,
      bucketId: json['bucketId'] as String?,
      assignedFullname: json['assignedFullname'] as String?,
      assignedUsername: json['assignedUsername'] as String?,
      bucketCode: json['bucketCode'] as String?,
      bucketName: json['bucketName'] as String?,
      groupCode: json['groupCode'] as String?,
      groupName: json['groupName'] as String?,
      activities: (json['activities'] as List<dynamic>?)
          ?.map((e) => Activities.fromJson(e as Map<String, dynamic>))
          .toList(),
      supportDescr: json['supportDescr'] as String?,
      outputAchieved: (json['outputAchieved'] as num?)?.toDouble(),
      weightPct: (json['weightPct'] as num?)?.toDouble(),
      scheduledEndDate: json['scheduledEndDate'] as String?,
      assignedMobile: json['assignedMobile'] as String?,
      assignedEmail: json['assignedEmail'] as String?,
      status: json['status'] as String?,
    );

Map<String, dynamic> _$ActivityDropdownToJson(ActivityDropdown instance) =>
    <String, dynamic>{
      'id': instance.id,
      'countryCode': instance.countryCode,
      'countryName': instance.countryName,
      'agencyId': instance.agencyId,
      'agencyCode': instance.agencyCode,
      'agencyName': instance.agencyName,
      'projectId': instance.projectId,
      'projectCode': instance.projectCode,
      'projectName': instance.projectName,
      'bucketId': instance.bucketId,
      'bucketCode': instance.bucketCode,
      'bucketName': instance.bucketName,
      'groupCode': instance.groupCode,
      'groupName': instance.groupName,
      'outputTarget': instance.outputTarget,
      'assignedFullname': instance.assignedFullname,
      'assignedUsername': instance.assignedUsername,
      'outputDescr': instance.outputDescr,
      'supportDescr': instance.supportDescr,
      'status': instance.status,
      'outputProgress': instance.outputProgress,
      'outputAchieved': instance.outputAchieved,
      'weightPct': instance.weightPct,
      'scheduledEndDate': instance.scheduledEndDate,
      'assignedMobile': instance.assignedMobile,
      'assignedEmail': instance.assignedEmail,
      'activities': instance.activities,
    };

Activities _$ActivitiesFromJson(Map<String, dynamic> json) => Activities(
      id: json['id'] as String?,
      countryCode: json['countryCode'] as String?,
      countryName: json['countryName'] as String?,
      agencyId: json['agencyId'],
      agencyCode: json['agencyCode'],
      agencyName: json['agencyName'],
      projectId: json['projectId'] as String?,
      projectCode: json['projectCode'],
      projectName: json['projectName'] as String?,
      bucketId: json['bucketId'] as String?,
      bucketCode: json['bucketCode'] as String?,
      bucketName: json['bucketName'] as String?,
      groupId: json['groupId'] as String?,
      groupCode: json['groupCode'] as String?,
      groupName: json['groupName'] as String?,
      activityCode: json['activityCode'] as String?,
      activityName: json['activityName'] as String?,
      activityDescr: json['activityDescr'],
      prevActivityId: json['prevActivityId'],
      prevActivityCode: json['prevActivityCode'],
      prevActivityName: json['prevActivityName'],
      childrenCount: json['childrenCount'] as int?,
      milestoneCode: json['milestoneCode'] as String?,
      milestoneName: json['milestoneName'] as String?,
      respAgencyId: json['respAgencyId'] as String?,
      respAgencyCode: json['respAgencyCode'] as String?,
      respAgencyName: json['respAgencyName'] as String?,
      fullname: json['fullname'] as String?,
      username: json['username'] as String?,
      email: json['email'] as String?,
      mobile: json['mobile'],
      scheduledStartDate: json['scheduledStartDate'] as String?,
      scheduledEndDate: json['scheduledEndDate'] as String?,
      scheduledDuration: (json['scheduledDuration'] as num?)?.toDouble(),
      estimatedMandays: (json['estimatedMandays'] as num?)?.toDouble(),
      actualStartDate: json['actualStartDate'] as String?,
      actualEndDate: json['actualEndDate'] as String?,
      actualDuration: (json['actualDuration'] as num?)?.toDouble(),
      actualMandays: (json['actualMandays'] as num?)?.toDouble(),
      esDate: json['esDate'] as String?,
      lsDate: json['lsDate'] as String?,
      efDate: json['efDate'] as String?,
      lfDate: json['lfDate'] as String?,
      slackTime: (json['slackTime'] as num?)?.toDouble(),
      outputTarget: (json['outputTarget'] as num?)?.toDouble(),
      outputDescr: json['outputDescr'] as String?,
      outputTargetAssigned: (json['outputTargetAssigned'] as num?)?.toDouble(),
      outputAchieved: (json['outputAchieved'] as num?)?.toDouble(),
      outputProgress: (json['outputProgress'] as num?)?.toDouble(),
      activityInput: json['activityInput'],
      activityCtq: json['activityCtq'],
      countA: json['countA'] as int?,
      countS: json['countS'] as int?,
      countC: json['countC'] as int?,
      countI: json['countI'] as int?,
      progressR: (json['progressR'] as num?)?.toDouble(),
      progressA: (json['progressA'] as num?)?.toDouble(),
      progressS: (json['progressS'] as num?)?.toDouble(),
      progressC: (json['progressC'] as num?)?.toDouble(),
      progressI: (json['progressI'] as num?)?.toDouble(),
      progressSNotAccepted: (json['progressSNotAccepted'] as num?)?.toDouble(),
      progressCNotAccepted: (json['progressCNotAccepted'] as num?)?.toDouble(),
      onCriticalPath: json['onCriticalPath'] as bool?,
      outputPartOfProjectOutput: json['outputPartOfProjectOutput'] as bool?,
      testNeeded: json['testNeeded'] as bool?,
      spreadOverGeography: json['spreadOverGeography'] as bool?,
      status: json['status'] as String?,
      weightPct: (json['weightPct'] as num?)?.toDouble(),
    );

Map<String, dynamic> _$ActivitiesToJson(Activities instance) =>
    <String, dynamic>{
      'id': instance.id,
      'countryCode': instance.countryCode,
      'countryName': instance.countryName,
      'agencyId': instance.agencyId,
      'agencyCode': instance.agencyCode,
      'agencyName': instance.agencyName,
      'projectId': instance.projectId,
      'projectCode': instance.projectCode,
      'projectName': instance.projectName,
      'bucketId': instance.bucketId,
      'bucketCode': instance.bucketCode,
      'bucketName': instance.bucketName,
      'groupId': instance.groupId,
      'groupCode': instance.groupCode,
      'groupName': instance.groupName,
      'activityCode': instance.activityCode,
      'activityName': instance.activityName,
      'activityDescr': instance.activityDescr,
      'prevActivityId': instance.prevActivityId,
      'prevActivityCode': instance.prevActivityCode,
      'prevActivityName': instance.prevActivityName,
      'childrenCount': instance.childrenCount,
      'milestoneCode': instance.milestoneCode,
      'milestoneName': instance.milestoneName,
      'respAgencyId': instance.respAgencyId,
      'respAgencyCode': instance.respAgencyCode,
      'respAgencyName': instance.respAgencyName,
      'fullname': instance.fullname,
      'username': instance.username,
      'email': instance.email,
      'mobile': instance.mobile,
      'scheduledStartDate': instance.scheduledStartDate,
      'scheduledEndDate': instance.scheduledEndDate,
      'scheduledDuration': instance.scheduledDuration,
      'estimatedMandays': instance.estimatedMandays,
      'actualStartDate': instance.actualStartDate,
      'actualEndDate': instance.actualEndDate,
      'actualDuration': instance.actualDuration,
      'actualMandays': instance.actualMandays,
      'esDate': instance.esDate,
      'lsDate': instance.lsDate,
      'efDate': instance.efDate,
      'lfDate': instance.lfDate,
      'slackTime': instance.slackTime,
      'outputTarget': instance.outputTarget,
      'outputDescr': instance.outputDescr,
      'outputTargetAssigned': instance.outputTargetAssigned,
      'outputAchieved': instance.outputAchieved,
      'outputProgress': instance.outputProgress,
      'activityInput': instance.activityInput,
      'activityCtq': instance.activityCtq,
      'countA': instance.countA,
      'countS': instance.countS,
      'countC': instance.countC,
      'countI': instance.countI,
      'progressR': instance.progressR,
      'progressA': instance.progressA,
      'progressS': instance.progressS,
      'progressC': instance.progressC,
      'progressI': instance.progressI,
      'progressSNotAccepted': instance.progressSNotAccepted,
      'progressCNotAccepted': instance.progressCNotAccepted,
      'onCriticalPath': instance.onCriticalPath,
      'outputPartOfProjectOutput': instance.outputPartOfProjectOutput,
      'testNeeded': instance.testNeeded,
      'spreadOverGeography': instance.spreadOverGeography,
      'status': instance.status,
      'weightPct': instance.weightPct,
    };
