// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'project_progress_dashboard_model.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

ProgressDashboardModel _$ProgressDashboardModelFromJson(
        Map<String, dynamic> json) =>
    ProgressDashboardModel(
      id: json['id'] as String?,
      countryCode: json['countryCode'] as String?,
      countryName: json['countryName'] as String?,
      agencyId: json['agencyId'] as String?,
      agencyCode: json['agencyCode'] as String?,
      agencyName: json['agencyName'] as String?,
      projectCode: json['projectCode'] as String?,
      projectName: json['projectName'] as String?,
      projecType: json['projecType'] as String?,
      purpose: json['purpose'] as String?,
      productCategoryId: json['productCategoryId'],
      productCategoryCode: json['productCategoryCode'],
      productCategoryName: json['productCategoryName'],
      productSubcategoryId: json['productSubcategoryId'],
      productSubcategoryCode: json['productSubcategoryCode'],
      productSubcategoryName: json['productSubcategoryName'],
      productGroupId: json['productGroupId'],
      productGroupCode: json['productGroupCode'],
      productGroupName: json['productGroupName'],
      productSubgroupId: json['productSubgroupId'],
      productSubgroupCode: json['productSubgroupCode'],
      productSubgroupName: json['productSubgroupName'],
      agencyCollaborationType: json['agencyCollaborationType'] as String?,
      scheduledStartDate: json['scheduledStartDate'] as String?,
      scheduledEndDate: json['scheduledEndDate'] as String?,
      scheduledDuration: (json['scheduledDuration'] as num?)?.toDouble(),
      estimatedMandays: (json['estimatedMandays'] as num?)?.toDouble(),
      actualStartDate: json['actualStartDate'] as String?,
      actualEndDate: json['actualEndDate'] as String?,
      actualDuration: json['actualDuration'] as String?,
      actualMandays: (json['actualMandays'] as num?)?.toDouble(),
      outputTarget: (json['outputTarget'] as num?)?.toDouble(),
      outputDescr: json['outputDescr'] as String?,
      outputTargetAssigned: (json['outputTargetAssigned'] as num?)?.toDouble(),
      outputAchieved: (json['outputAchieved'] as num?)?.toDouble(),
      outputProgress: (json['outputProgress'] as num?)?.toDouble(),
      areaType: json['areaType'] as String?,
      areaLevel: json['areaLevel'] as int?,
      areaCount: json['areaCount'] as int?,
      areasAssigned: json['areasAssigned'] as int?,
      projectSiteName: json['projectSiteName'] as String?,
      projectSiteLatitude: (json['projectSiteLatitude'] as num?)?.toDouble(),
      projectSiteLongitude: (json['projectSiteLongitude'] as num?)?.toDouble(),
      projectSitePoint: json['projectSitePoint'],
      pmFullname: json['pmFullname'] as String?,
      pmUsername: json['pmUsername'] as String?,
      pmEmail: json['pmEmail'] as String?,
      pmMobile: json['pmMobile'] as String?,
      singleAccountableFullname: json['singleAccountableFullname'] as String?,
      singleAccountableUsername: json['singleAccountableUsername'] as String?,
      singleAccountableEmail: json['singleAccountableEmail'] as String?,
      singleAccountableMobile: json['singleAccountableMobile'] as String?,
      countR: json['countR'] as int?,
      countA: json['countA'] as int?,
      countS: json['countS'] as int?,
      countC: json['countC'] as int?,
      countI: json['countI'] as int?,
      progressR: (json['progressR'] as num?)?.toDouble(),
      progressA: (json['progressA'] as num?)?.toDouble(),
      progressS: (json['progressS'] as num?)?.toDouble(),
      progressC: (json['progressC'] as num?)?.toDouble(),
      progressI: (json['progressI'] as num?)?.toDouble(),
      testTypeCount: (json['testTypeCount'] as num?)?.toDouble(),
      testCountTarget: (json['testCountTarget'] as num?)?.toDouble(),
      testCountCompleted: (json['testCountCompleted'] as num?)?.toDouble(),
      testCountApproved: (json['testCountApproved'] as num?)?.toDouble(),
      customerType: json['customerType'] as String?,
      customerCount: json['customerCount'] as int?,
      contractAmount: (json['contractAmount'] as num?)?.toDouble(),
      billedAmount: (json['billedAmount'] as num?)?.toDouble(),
      paidAmount: (json['paidAmount'] as num?)?.toDouble(),
      contractorCount: (json['contractorCount'] as num?)?.toDouble(),
      contractorAmount: (json['contractorAmount'] as num?)?.toDouble(),
      contractorBilledAmount:
          (json['contractorBilledAmount'] as num?)?.toDouble(),
      contractorPaidAmount: (json['contractorPaidAmount'] as num?)?.toDouble(),
      contractorQuantity: (json['contractorQuantity'] as num?)?.toDouble(),
      contractorDelivered: (json['contractorDelivered'] as num?)?.toDouble(),
      createdbyFullname: json['createdbyFullname'],
      createdbyUsername: json['createdbyUsername'],
      createdbyEmail: json['createdbyEmail'],
      createdbyMobile: json['createdbyMobile'],
      createdAt: json['createdAt'],
      updatedAt: json['updatedAt'],
      projectApproverCount: json['projectApproverCount'] as int?,
      approvedby1Fullname: json['approvedby1Fullname'],
      approvedby1Username: json['approvedby1Username'],
      approvedby1Email: json['approvedby1Email'],
      approvedby1Mobile: json['approvedby1Mobile'],
      approved1On: json['approved1On'],
      isApprover2Passed: json['isApprover2Passed'] as bool?,
      approvedby2Fullname: json['approvedby2Fullname'],
      approvedby2Username: json['approvedby2Username'],
      approvedby2Email: json['approvedby2Email'],
      approvedby2Mobile: json['approvedby2Mobile'],
      approved2On: json['approved2On'],
      isApprover3Passed: json['isApprover3Passed'] as bool?,
      approvedby3Fullname: json['approvedby3Fullname'],
      approvedby3Username: json['approvedby3Username'],
      approvedby3Email: json['approvedby3Email'],
      approvedby3Mobile: json['approvedby3Mobile'],
      approved3On: json['approved3On'],
      status: json['status'],
      digest: json['digest'],
      projectDescr: json['projectDescr'] as String?,
      masterViewModel: json['masterViewModel'],
      approver1Passed: json['approver1Passed'] as bool?,
      unableAsTemplate: json['unableAsTemplate'] as bool?,
      geographyControlEnforced: json['geographyControlEnforced'] as bool?,
      onlyPmAccountable: json['onlyPmAccountable'] as bool?,
      otherSinglePersonAccountable:
          json['otherSinglePersonAccountable'] as bool?,
      testApproversGeographyControlled:
          json['testApproversGeographyControlled'] as bool?,
      networkSiteSurveyAllowed: json['networkSiteSurveyAllowed'] as bool?,
      telecomSignalSurveyAllowed: json['telecomSignalSurveyAllowed'] as bool?,
      equipmentSurveyAllowed: json['equipmentSurveyAllowed'] as bool?,
      customerSurveyAllowed: json['customerSurveyAllowed'] as bool?,
      vendorSurveyAllowed: json['vendorSurveyAllowed'] as bool?,
      channelSurveyAllowed: json['channelSurveyAllowed'] as bool?,
      employeeSurveyAllowed: json['employeeSurveyAllowed'] as bool?,
      geologicalSurveyAllowed: json['geologicalSurveyAllowed'] as bool?,
      environmentSurveyAllowed: json['environmentSurveyAllowed'] as bool?,
      populationSurveyAllowed: json['populationSurveyAllowed'] as bool?,
      householdSurveyAllowed: json['householdSurveyAllowed'] as bool?,
      industrySurveyAllowed: json['industrySurveyAllowed'] as bool?,
      generalGurveyAllowed: json['generalGurveyAllowed'] as bool?,
    )..scopeBuckets = (json['scopeBuckets'] as List<dynamic>?)
        ?.map((e) => ScopeBuckets.fromJson(e as Map<String, dynamic>))
        .toList();

Map<String, dynamic> _$ProgressDashboardModelToJson(
        ProgressDashboardModel instance) =>
    <String, dynamic>{
      'id': instance.id,
      'countryCode': instance.countryCode,
      'countryName': instance.countryName,
      'agencyId': instance.agencyId,
      'agencyCode': instance.agencyCode,
      'agencyName': instance.agencyName,
      'projectCode': instance.projectCode,
      'projectName': instance.projectName,
      'projecType': instance.projecType,
      'purpose': instance.purpose,
      'productCategoryId': instance.productCategoryId,
      'productCategoryCode': instance.productCategoryCode,
      'productCategoryName': instance.productCategoryName,
      'productSubcategoryId': instance.productSubcategoryId,
      'productSubcategoryCode': instance.productSubcategoryCode,
      'productSubcategoryName': instance.productSubcategoryName,
      'productGroupId': instance.productGroupId,
      'productGroupCode': instance.productGroupCode,
      'productGroupName': instance.productGroupName,
      'productSubgroupId': instance.productSubgroupId,
      'productSubgroupCode': instance.productSubgroupCode,
      'productSubgroupName': instance.productSubgroupName,
      'agencyCollaborationType': instance.agencyCollaborationType,
      'scheduledStartDate': instance.scheduledStartDate,
      'scheduledEndDate': instance.scheduledEndDate,
      'scheduledDuration': instance.scheduledDuration,
      'estimatedMandays': instance.estimatedMandays,
      'actualStartDate': instance.actualStartDate,
      'actualEndDate': instance.actualEndDate,
      'actualDuration': instance.actualDuration,
      'actualMandays': instance.actualMandays,
      'outputTarget': instance.outputTarget,
      'outputDescr': instance.outputDescr,
      'outputTargetAssigned': instance.outputTargetAssigned,
      'outputAchieved': instance.outputAchieved,
      'outputProgress': instance.outputProgress,
      'areaType': instance.areaType,
      'areaLevel': instance.areaLevel,
      'areaCount': instance.areaCount,
      'areasAssigned': instance.areasAssigned,
      'projectSiteName': instance.projectSiteName,
      'projectSiteLatitude': instance.projectSiteLatitude,
      'projectSiteLongitude': instance.projectSiteLongitude,
      'projectSitePoint': instance.projectSitePoint,
      'pmFullname': instance.pmFullname,
      'pmUsername': instance.pmUsername,
      'pmEmail': instance.pmEmail,
      'pmMobile': instance.pmMobile,
      'singleAccountableFullname': instance.singleAccountableFullname,
      'singleAccountableUsername': instance.singleAccountableUsername,
      'singleAccountableEmail': instance.singleAccountableEmail,
      'singleAccountableMobile': instance.singleAccountableMobile,
      'countR': instance.countR,
      'countA': instance.countA,
      'countS': instance.countS,
      'countC': instance.countC,
      'countI': instance.countI,
      'progressR': instance.progressR,
      'progressA': instance.progressA,
      'progressS': instance.progressS,
      'progressC': instance.progressC,
      'progressI': instance.progressI,
      'testTypeCount': instance.testTypeCount,
      'testCountTarget': instance.testCountTarget,
      'testCountCompleted': instance.testCountCompleted,
      'testCountApproved': instance.testCountApproved,
      'customerType': instance.customerType,
      'customerCount': instance.customerCount,
      'contractAmount': instance.contractAmount,
      'billedAmount': instance.billedAmount,
      'paidAmount': instance.paidAmount,
      'contractorCount': instance.contractorCount,
      'contractorAmount': instance.contractorAmount,
      'contractorBilledAmount': instance.contractorBilledAmount,
      'contractorPaidAmount': instance.contractorPaidAmount,
      'contractorQuantity': instance.contractorQuantity,
      'contractorDelivered': instance.contractorDelivered,
      'createdbyFullname': instance.createdbyFullname,
      'createdbyUsername': instance.createdbyUsername,
      'createdbyEmail': instance.createdbyEmail,
      'createdbyMobile': instance.createdbyMobile,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'projectApproverCount': instance.projectApproverCount,
      'approvedby1Fullname': instance.approvedby1Fullname,
      'approvedby1Username': instance.approvedby1Username,
      'approvedby1Email': instance.approvedby1Email,
      'approvedby1Mobile': instance.approvedby1Mobile,
      'approved1On': instance.approved1On,
      'isApprover2Passed': instance.isApprover2Passed,
      'approvedby2Fullname': instance.approvedby2Fullname,
      'approvedby2Username': instance.approvedby2Username,
      'approvedby2Email': instance.approvedby2Email,
      'approvedby2Mobile': instance.approvedby2Mobile,
      'approved2On': instance.approved2On,
      'isApprover3Passed': instance.isApprover3Passed,
      'approvedby3Fullname': instance.approvedby3Fullname,
      'approvedby3Username': instance.approvedby3Username,
      'approvedby3Email': instance.approvedby3Email,
      'approvedby3Mobile': instance.approvedby3Mobile,
      'approved3On': instance.approved3On,
      'status': instance.status,
      'digest': instance.digest,
      'projectDescr': instance.projectDescr,
      'masterViewModel': instance.masterViewModel,
      'approver1Passed': instance.approver1Passed,
      'unableAsTemplate': instance.unableAsTemplate,
      'geographyControlEnforced': instance.geographyControlEnforced,
      'onlyPmAccountable': instance.onlyPmAccountable,
      'otherSinglePersonAccountable': instance.otherSinglePersonAccountable,
      'testApproversGeographyControlled':
          instance.testApproversGeographyControlled,
      'networkSiteSurveyAllowed': instance.networkSiteSurveyAllowed,
      'telecomSignalSurveyAllowed': instance.telecomSignalSurveyAllowed,
      'equipmentSurveyAllowed': instance.equipmentSurveyAllowed,
      'customerSurveyAllowed': instance.customerSurveyAllowed,
      'vendorSurveyAllowed': instance.vendorSurveyAllowed,
      'channelSurveyAllowed': instance.channelSurveyAllowed,
      'employeeSurveyAllowed': instance.employeeSurveyAllowed,
      'geologicalSurveyAllowed': instance.geologicalSurveyAllowed,
      'environmentSurveyAllowed': instance.environmentSurveyAllowed,
      'populationSurveyAllowed': instance.populationSurveyAllowed,
      'householdSurveyAllowed': instance.householdSurveyAllowed,
      'industrySurveyAllowed': instance.industrySurveyAllowed,
      'generalGurveyAllowed': instance.generalGurveyAllowed,
      'scopeBuckets': instance.scopeBuckets,
    };

ScopeBuckets _$ScopeBucketsFromJson(Map<String, dynamic> json) => ScopeBuckets(
      id: json['id'] as String?,
      countryCode: json['countryCode'] as String?,
      countryName: json['countryName'] as String?,
      agencyId: json['agencyId'] as String?,
      agencyCode: json['agencyCode'] as String?,
      agencyName: json['agencyName'] as String?,
      projectId: json['projectId'] as String?,
      projectCode: json['projectCode'] as String?,
      projectName: json['projectName'] as String?,
      bucketCode: json['bucketCode'] as String?,
      bucketName: json['bucketName'] as String?,
      outputTarget: json['outputTarget'] as int?,
      outputDescr: json['outputDescr'] as String?,
      outputTargetAssigned: (json['outputTargetAssigned'] as num?)?.toDouble(),
      outputAchieved: (json['outputAchieved'] as num?)?.toDouble(),
      outputProgress: (json['outputProgress'] as num?)?.toDouble(),
      countR: json['countR'] as int?,
      countA: json['countA'] as int?,
      countS: json['countS'] as int?,
      countC: json['countC'] as int?,
      countI: json['countI'] as int?,
      progressR: (json['progressR'] as num?)?.toDouble(),
      progressA: (json['progressA'] as num?)?.toDouble(),
      progressS: (json['progressS'] as num?)?.toDouble(),
      progressC: (json['progressC'] as num?)?.toDouble(),
      progressI: (json['progressI'] as num?)?.toDouble(),
      fullname: json['fullname'] as String?,
      username: json['username'] as String?,
      email: json['email'] as String?,
      mobile: json['mobile'] as String?,
      activityGroups: (json['activityGroups'] as List<dynamic>?)
          ?.map((e) => ActivityDropdown.fromJson(e as Map<String, dynamic>))
          .toList(),
    );

Map<String, dynamic> _$ScopeBucketsToJson(ScopeBuckets instance) =>
    <String, dynamic>{
      'id': instance.id,
      'countryCode': instance.countryCode,
      'countryName': instance.countryName,
      'agencyId': instance.agencyId,
      'agencyCode': instance.agencyCode,
      'agencyName': instance.agencyName,
      'projectId': instance.projectId,
      'projectCode': instance.projectCode,
      'projectName': instance.projectName,
      'bucketCode': instance.bucketCode,
      'bucketName': instance.bucketName,
      'outputTarget': instance.outputTarget,
      'outputDescr': instance.outputDescr,
      'outputTargetAssigned': instance.outputTargetAssigned,
      'outputAchieved': instance.outputAchieved,
      'outputProgress': instance.outputProgress,
      'countR': instance.countR,
      'countA': instance.countA,
      'countS': instance.countS,
      'countC': instance.countC,
      'countI': instance.countI,
      'progressR': instance.progressR,
      'progressA': instance.progressA,
      'progressS': instance.progressS,
      'progressC': instance.progressC,
      'progressI': instance.progressI,
      'fullname': instance.fullname,
      'username': instance.username,
      'email': instance.email,
      'mobile': instance.mobile,
      'activityGroups': instance.activityGroups,
    };
